#!/usr/bin/env python

import argparse
import subprocess
import pkg_resources
import os

from kerberos_tgs.utils.AES import AES


CONFIG_FILE_PATH = pkg_resources.resource_filename('kerberos_tgs', 'config')


def setup(args):
    config_file_exists = os.path.isfile(CONFIG_FILE_PATH)

    if not config_file_exists:
        print("Inicializando banco de dados...")
        # Cria o banco no mongo

        tgs_key = input("Insira a chave simétrica gerada pelo AS: ")

        with open(CONFIG_FILE_PATH, 'w') as f:
            f.write(tgs_key)

        print("Configuração concluída\n")
    else:
        with open(CONFIG_FILE_PATH, 'r') as f:
            tgs_key = f.read()

        print("Servidor já configurado\n")
        print(f"Chave do TGS:\n{tgs_key}")


def start_server(args):
    config_file_exists = os.path.isfile(CONFIG_FILE_PATH)

    if config_file_exists:
        subprocess.run(['start-kerberos-tgs-server', CONFIG_FILE_PATH])
    else:
        print("[Erro] Arquivo de configuração não encontrado")
        print(" Verifique se o servidor foi configurado corretamente")
        exit()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=('Serviço de Concessão de Tickets (TGS) de um sistema '
                     'de autenticacao Kerberos')
    )
    subparsers = parser.add_subparsers(required=True, dest='command')

    setup_parser = subparsers.add_parser('setup',help='Configura o servidor')
    setup_parser.set_defaults(func=setup)

    start_server_parser = subparsers.add_parser('start', help='Inicia o TGS')
    start_server_parser.set_defaults(func=start_server)

    #new_service_parser = subparsers.add_parser('new-service', help='Cadastra um novo serviço')
    #new_service_parser.set_defaults(func=create_new_service)

    args = parser.parse_args()

    args.func(args)