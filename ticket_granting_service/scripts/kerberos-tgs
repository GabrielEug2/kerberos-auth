#!/usr/bin/env python

import argparse
import subprocess
import pkg_resources
import os

from pymongo import MongoClient

from kerberos_tgs.crypto import Crypto


CONFIG_FILE_PATH = pkg_resources.resource_filename('kerberos_tgs', 'config')


def setup(args):
    config_file_exists = os.path.isfile(CONFIG_FILE_PATH)

    if not config_file_exists:
        tgs_key = input("Insira a chave simétrica gerada pelo AS: ")

        with open(CONFIG_FILE_PATH, 'w') as f:
            f.write(f"TGS_KEY = \"{tgs_key}\"")

        print("Configuração concluída\n")
    else:
        print("Servidor já configurado\n")
        print("Localização do arquivo de configuração:")
        print(CONFIG_FILE_PATH)


def start_server(args):
    server_is_configured = os.path.isfile(CONFIG_FILE_PATH)

    if server_is_configured:
        subprocess.run(['start-kerberos-tgs-server', CONFIG_FILE_PATH])
    else:
        print("[Erro] Arquivo de configuração não encontrado")
        print("Verifique se o servidor foi configurado corretamente")
        exit()


def create_new_service(args):
    client = MongoClient('mongodb://localhost:27017/')
    db = client['kerberos_tgs_db']
    services = db.services

    service_created = False
    while not service_created:
        print("--Registrando novo servico--")
        desired_id = input("Service ID: ")

        id_already_taken = services.find_one({'_id': desired_id}) is not None

        if not id_already_taken:
            service = {
                '_id': desired_id,
                'key': Crypto.generate_new_key().decode()
            }

            services.insert_one(service)

            print("\nServico cadastrado com sucesso")
            print(f"ID: {service['_id']}")
            print(f"Key: {service['key']}")

            service_created = True
        else:
            print("Servico já existe")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=('Serviço de Concessão de Tickets (TGS) de um '
                     'sistema de autenticacao Kerberos')
    )
    subparsers = parser.add_subparsers(required=True, dest='command')

    setup_parser = subparsers.add_parser('setup',help='Configura o servidor')
    setup_parser.set_defaults(func=setup)

    start_server_parser = subparsers.add_parser('start', help='Inicia o TGS')
    start_server_parser.set_defaults(func=start_server)

    new_service_parser = subparsers.add_parser('new-service', help='Cadastra um novo serviço')
    new_service_parser.set_defaults(func=create_new_service)

    args = parser.parse_args()
    args.func(args)