#!/usr/bin/env python

import argparse
import subprocess
import os

from kerberos_as import db
from kerberos_as.models import Client
from kerberos_as.models import Server

def setup(args):
    print("Inicializando banco de dados...")
    db.drop_db()
    db.init_db()

    print("Registrando TGS...")
    tgs_server = Server('TGS')
    
    session = db.Session()
    
    session.add(tgs_server)
    session.commit()

    print("\n--TGS--")
    print(f"Server ID: {tgs_server.server_id}")
    print(f"Key: {tgs_server.key}")

    session.close()


def run_auth_service(args):
    subprocess.run('start-kerberos-as')

def create_new_client(args):
    session = db.Session()

    client_created = False
    while not client_created:
        print("--Registrando novo cliente--")
        desired_client_id = input("Client ID: ")

        client_exists = session.query(Client).filter_by(client_id=desired_client_id).first() is not None

        if not client_exists:
            client = Client(desired_client_id)
            
            session.add(client)
            session.commit()

            print("\n--Cliente cadastrado--")
            print(f"Client ID: {client.client_id}")
            print(f"Key: {client.key}")

            client_created = True
        else:
            print("Cliente já existe")

    session.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Serviço de autenticacao (AS) de um sistema kerberos'
    )
    subparsers = parser.add_subparsers(title='commands', dest='command')
    subparsers.required = True

    setup_parser = subparsers.add_parser('setup', help='Cria o banco de dados e gera uma chave pro TGS.')
    setup_parser.set_defaults(func=setup)

    run_auth_service_parser = subparsers.add_parser('run', help='Inicia o Serviço de Autenticacao')
    run_auth_service_parser.set_defaults(func=run_auth_service)

    new_client_parser = subparsers.add_parser('new-client', help='Cadastra um novo cliente')
    new_client_parser.set_defaults(func=create_new_client)

    args = parser.parse_args()
    args.func(args)