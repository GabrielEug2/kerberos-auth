#!/usr/bin/env python

import argparse
import subprocess
import pkg_resources
import os

from kerberos_as.utils.AES import AES
from kerberos_as.database import init_db
from kerberos_as.database import db_session
from kerberos_as.models import Client


CONFIG_FILE_PATH = pkg_resources.resource_filename('kerberos_as', 'config')


def setup(args):
    config_file_exists = os.path.isfile(CONFIG_FILE_PATH)

    if not config_file_exists:
        print("Inicializando banco de dados...")
        init_db()

        print("Registrando chave do TGS...")
        tgs_key = AES.generate_new_key().decode('utf-8')

        with open(CONFIG_FILE_PATH, 'w') as f:
            f.write(f"TGS_KEY = \"{tgs_key}\"")

        print("Configuração concluída\n")
        print("Registre a chave abaixo no TGS")
        print(tgs_key)
    else:
        print("Servidor já configurado\n")
        print("Localização do arquivo de configuração:")
        print("" + CONFIG_FILE_PATH)


def start_server(args):
    config_file_exists = os.path.isfile(CONFIG_FILE_PATH)

    if config_file_exists:
        subprocess.run(['start-kerberos-as-server', CONFIG_FILE_PATH])
    else:
        print("[Erro] Arquivo de configuração não encontrado")
        print(" Verifique se o servidor foi configurado corretamente")
        exit()


def create_new_client(args):
    client_created = False

    while not client_created:
        print("--Registrando novo cliente--")
        desired_id = input("Client ID: ")

        id_already_taken = Client.query.filter_by(client_id=desired_id).first() is not None

        if not id_already_taken:
            client = Client(desired_id)
            
            db_session.add(client)
            db_session.commit()

            print("\nCliente cadastrado com sucesso")
            print(f"ID: {client.client_id}")
            print(f"Key: {client.key}")

            client_created = True
        else:
            print("Cliente já existe")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Serviço de Autenticacao (AS) de um sistema kerberos'
    )
    subparsers = parser.add_subparsers(required=True, dest='command')

    setup_parser = subparsers.add_parser('setup',help='Configura o servidor')
    setup_parser.set_defaults(func=setup)

    start_server_parser = subparsers.add_parser('start', help='Inicia o serviço de autenticacao')
    start_server_parser.set_defaults(func=start_server)

    new_client_parser = subparsers.add_parser('new-client', help='Cadastra um novo cliente')
    new_client_parser.set_defaults(func=create_new_client)

    args = parser.parse_args()

    args.func(args)