#!/usr/bin/env python

import argparse
from datetime import datetime

from kerberos_client.kerberos_client import KerberosClient
from kerberos_client.exceptions import (ServerDownError,
                                        ServerError,
                                        InvalidResponseError,
                                        ResponseDoesNotMatch,
                                        UnknownService)


def sign_up(args):
    kerberos = KerberosClient()

    client_created = False
    while not client_created:
        print("\n--Registrando novo cliente--")
        client_id = input("ID: ")
        password = input("Senha: ")

        try:
            kerberos.sign_up(client_id, password)

            client_created = True
        except ServerDownError:
            print("[Erro] AS está offline")
        except ServerError as e:
            print("[Erro] AS retornou um erro")
            print(e)
        except InvalidResponseError:
            print("[Erro] Falha ao interpretar a resposta do AS")
    
    print("Cliente cadastrado com sucesso")


def request_ticket(args):
    try:
        requested_time = datetime.strptime(args.requested_time, "%d/%m/%Y %H:%M")
    except ValueError:
        print("Tempo solicitado inválido")
        return

    kerberos = KerberosClient()

    try:
        autorized_time = kerberos.acquire_new_ticket(
            client_id=args.client_id,
            password=args.password,
            service_id=args.service_id,
            requested_time=args.requested_time
        )
    except ServerDownError:
        print("[Erro] AS ou TGS offline")
        return
    except ServerError as e:
        print("[Erro] AS ou TGS retornou um erro")
        print(e)
        return
    except ResponseDoesNotMatch:
        print("[Erro] Resposta do AS ou do TGS não confere com o pedido")
        return
    except InvalidResponseError:
        print("[Erro] Falha ao interpretar a resposta do AS ou do TGS")
        return
    
    print(f"Ticket para '{args.service_id}' obtido com sucesso")
    print(f"    Validade: {autorized_time}")


def use_service(args):
    kerberos = KerberosClient()

    available_tickets = kerberos.get_available_tickets(args.client_id, service_id=args.service_id)

    if len(available_tickets) > 0:
        print("-- Tickets disponíveis --\n")
        i = 1
        for ticket in available_tickets:
            print(f"ID: {i}")
            print(f"    Validade: {ticket['autorizedTime']}")
            print(f"    Chave de sessão: {ticket['sessionKey']}")
            print(f"    Ticket: {ticket['ticket']}")
            print()
            i += 1
        ticket_id = int(input(f"ID do ticket que deseja usar: "))
        chosen_ticket = available_tickets[ticket_id-1]

        try:
            response = kerberos.use_service(
                args.client_id,
                args.service_id,
                chosen_ticket['ticket'].encode(),
                chosen_ticket['sessionKey'].encode()
            )
        except ServerDownError:
            print(f"[Erro] Serviço offline")
            return
        except ServerError as e:
            print("[Erro] Serviço retornou um erro")
            print(e)
            return
        except ResponseDoesNotMatch:
            print("[Erro] Resposta do serviço não confere com o pedido")
            return
        except InvalidResponseError:
            print("[Erro] Falha ao interpretar a resposta do serviço")
            return
        except UnknownService:
            print("[Erro] Serviço desconhecido")
            return

        print(f"Resposta recebida do serviço:\n{response}")
    else:
        print("Nenhum ticket salvo para este serviço")
    

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=('Aplicação cliente de um sistema de '
                    'autenticacao Kerberos. Utiliza tickets '
                    'para acessar serviços.')
    )
    subparsers = parser.add_subparsers(required=True, dest='command')

    request_ticket_parser = subparsers.add_parser('request-ticket',
        help='Obtem um novo ticket de acesso a um determinado serviço'
    )
    request_ticket_parser.add_argument('client_id', help='Seu ID no servico de autenticação')
    request_ticket_parser.add_argument('password', help='Sua senha no servico de autenticação')
    request_ticket_parser.add_argument('service_id', help='ID do servico a ser utilizado')
    request_ticket_parser.add_argument('requested_time',
        help=('Tempo solicitado para uso do serviço. Data de validade '
              'no formato \"dd/mm/yyyy HH:MM\"')
    )
    request_ticket_parser.set_defaults(func=request_ticket)

    use_service_parser = subparsers.add_parser('use-service',
        help='Tenta acessar um serviço com algum dos tickets salvos'
    )
    use_service_parser.add_argument('client_id', help='Seu ID no servico de autenticação')
    use_service_parser.add_argument('service_id', help='ID do servico a ser utilizado')
    use_service_parser.set_defaults(func=use_service)

    sign_up_parser = subparsers.add_parser('sign-up', help='Registra um novo cliente no AS')
    sign_up_parser.set_defaults(func=sign_up)

    args = parser.parse_args()
    args.func(args)