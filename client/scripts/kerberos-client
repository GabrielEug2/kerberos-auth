#!/usr/bin/env python

import argparse
import os
import json

from kerberos_client.kerberos_client import KerberosClient, CLIENT_DATA_PATH


def save_client_data(client_id, client_key):
    """Salva os dados do cliente localmente
    
    Args:
        client_id (str): ID do cliente
        client_key (bytes): Chave do cliente
    """

    client_data = {
        'client_id': client_id,
        'key': client_key.decode(),
        'tickets': {}
    }

    with open(CLIENT_DATA_PATH, 'w') as f:
        json.dump(client_data, f, indent=4)


def load_client_data():
    """Recupera os dados do cliente
    
    Returns:
        dict: Dados do cliente. Possui as chaves
              "client_id" (string), "key" (bytes)
              e "tickets" (dict). Retorna None se
              não houverem dados salvos
    """

    try:
        with open(CLIENT_DATA_PATH, 'r') as f:
            client_data = json.load(f)

        # Chave é salva como string, tem que converter
        # pra bytes antes de retornar
        client_data['key'] = client_data['key'].encode()
    except FileNotFoundError:
        client_data = None

    return client_data


def setup_client(args):
    client_data_exists = os.path.isfile(CLIENT_DATA_PATH)

    if not client_data_exists:
        print("--Primeira configuração--")
        print("Realize o cadastro no Serviço de Autenticação, e então "
              "insira os mesmos dados abaixo.")
        client_id = input("ID: ")
        client_key = input("Key: ")

        save_client_data(client_id, client_key.encode())

        print("Cliente configurado com sucesso.")
    else:
        client_data = load_client_data()

        print("Este cliente já está configurado.")
        print(f"ID: {client_data['client_id']}")
        print(f"Key: {client_data['key'].decode()}")


def acquire_new_ticket(args):
    client_data = load_client_data()

    if client_data is None:
        print("Configure o cliente antes.")
        exit()

    kerberus_client = KerberosClient(client_data['client_id'], client_data['key'])
    got_ticket = kerberus_client.acquire_new_ticket(args.service_id, args.requested_time)

    if got_ticket:
        print("Ticket obtido com sucesso")
    else:
        print("Falha ao obter o ticket")


def show_tickets(args):
    client_data = load_client_data()

    if client_data is None:
        print("Configure o cliente antes.")
        exit()

    tickets = client_data['tickets']

    if len(tickets) > 0:
        for service_name, ticket in tickets.items():
            print(f"Servico: {service_name}")
            print(f"    Chave de sessão: {ticket['session_key']}")
            print(f"    Ticket: {ticket['ticket']}")
            print(f"    Validade: {ticket['autorized_time']}")
            print()
    else:
        print("Nenhum ticket salvo")


def use_service(args):
    pass


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=('Aplicação cliente de um sistema de '
                    'autenticacao Kerberos. Utiliza tickets '
                    'para acessar serviços.')
    )
    subparsers = parser.add_subparsers(required=True, dest='command')

    setup_parser = subparsers.add_parser('setup', help='Configura o cliente')
    setup_parser.set_defaults(func=setup_client)

    # TODO: colocar outras opções pra data de validade, por exemplo
    #       somente nas terças feiras, ou do horário X a Y
    request_ticket_parser = subparsers.add_parser('request-ticket', help='Obtem um novo ticket')
    request_ticket_parser.add_argument('service_id', help='ID do servico a ser utilizado')
    request_ticket_parser.add_argument('requested_time',
        help='Prazo de validade para o ticket, no formato \"DD/MM/YY-hh:mm\"'
    )
    request_ticket_parser.set_defaults(func=acquire_new_ticket)

    use_service_parser = subparsers.add_parser('use', help=('Tenta acessar um serviço '
                                                            'com os tickets salvos'))
    use_service_parser.add_argument('service_id', help='ID do servico a ser utilizado')
    use_service_parser.set_defaults(func=use_service)

    show_tickets_parser = subparsers.add_parser('show', help='Exibe os tickets salvos')
    show_tickets_parser.set_defaults(func=show_tickets)

    args = parser.parse_args()
    args.func(args)