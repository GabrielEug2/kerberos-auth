#!/usr/bin/env python

import argparse

from kerberos_client.kerberos_client import KerberosClient


def request_ticket(args):
    kerberos_client = KerberosClient(args.client_id)
    autorized_time = kerberos_client.acquire_new_ticket(
        args.service_id,
        args.requested_time
    )

    if autorized_time:
        print(f"Ticket para '{args.service_id}' obtido com sucesso")
        print(f"    Validade: {autorized_time}")
    else:
        print("Falha ao obter o ticket")


def use_service(args):
    kerberos_client = KerberosClient(args.client_id)
    available_tickets = kerberos_client.available_tickets(service_id=args.service_id)

    if len(available_tickets) > 0:
        print("-- Tickets disponíveis --\n")
        i = 1
        for ticket in available_tickets:
            print(f"ID: {i}")
            print(f"    Validade: {ticket['autorizedTime']}")
            print(f"    Chave de sessão: {ticket['sessionKey']}")
            print(f"    Ticket: {ticket['ticket']}")
            print()
            i += 1
        ticket_id = input(f"ID do ticket que deseja usar: ")
        chosen_ticket = tickets_for_service[ticket_id-1]

        response = kerberos_client.use_service(
            args.service_id,
            chosen_ticket['ticket'].encode(),
            chosen_ticket['sessionKey'].encode()
        )
    else:
        print("Nenhum ticket salvo para este serviço")
        return
    

def new_client(args):
    print("--Novo cliente--")
    print("Registre-se no Serviço de Autenticação e depois insira "
          "os mesmos dados abaixo: ")
    client_id = input("Client ID: ")
    client_key = input("Key: ")

    client_saved = KerberosClient.save_client(client_id, client_key)

    if client_saved:
        print("Cliente cadastrado com sucesso")
    else:
        print("Cliente não foi salvo")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=('Aplicação cliente de um sistema de '
                    'autenticacao Kerberos. Utiliza tickets '
                    'para acessar serviços.')
    )
    subparsers = parser.add_subparsers(required=True, dest='command')

    # TODO: colocar outras opções pra data de validade, por exemplo
    #       somente nas terças feiras, ou do horário X a Y
    request_ticket_parser = subparsers.add_parser('request-ticket', help='Obtem um novo ticket')
    request_ticket_parser.add_argument('client_id', help='Seu ID no servico de autenticação')
    request_ticket_parser.add_argument('service_id', help='ID do servico a ser utilizado')
    request_ticket_parser.add_argument('requested_time',
        help='Prazo de validade para o ticket, no formato \"DD/MM/YY-hh:mm\"'
    )
    request_ticket_parser.set_defaults(func=request_ticket)

    use_service_parser = subparsers.add_parser('use', help=('Tenta acessar um serviço '
                                                            'com os tickets salvos'))
    use_service_parser.add_argument('client_id', help='Seu ID no servico de autenticação')
    use_service_parser.add_argument('service_id', help='ID do servico a ser utilizado')
    use_service_parser.set_defaults(func=use_service)

    new_client_parser = subparsers.add_parser('new-client', help='Registra um novo cliente')
    new_client_parser.set_defaults(func=new_client)

    args = parser.parse_args()
    args.func(args)